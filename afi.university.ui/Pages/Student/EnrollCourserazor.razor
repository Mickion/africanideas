@page "/student/enroll"

@attribute [Authorize]
@inject IToastService toastService
@inject ICourseService CourseService
@inject IStudentService StudentService
@inject IAuthenticationService AuthenticationService

@if (loading)
{
    <div class="spinner-border spinner-border-sm"></div>
}
else
{
    if (_courses!.Count() > 0)
    {
        <table class="table small table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>NQF Level</th>
                    <th>Duration</th>
                    <th>Registered</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _courses!)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.NQFLevel</td>
                        <td>@item.Duration</td>
                        <td>
                            @if (item.Registered)
                            {
                                <span class="oi oi-circle-check" aria-hidden="true" style="color: green !important;"></span>
                            }
                            else
                            {
                                <span class="oi oi-circle-x" aria-hidden="true" style="color:red !important"></span>
                            }

                        </td>
                        <td>
                            @if (item.Registered)
                            {
                                <button class="btn btn-primary float-end" @onclick="e => ClickHandler(item.Id)">De-Register</button>
                            }
                            else
                            {
                                <button class="btn btn-primary float-end" @onclick="e => ClickHandler(item.Id)">Register</button>
                            }

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private bool loading;    
    private StudentResponse? _student;
    private IEnumerable<CourseResponse>? _courses;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            _student = await StudentService.GetStudentInformationAsync(new StudentRequest(AuthenticationService.User.Id));
            _courses = await CourseService.GetAllUniversityCoursesAsync();

            foreach (var course in _courses)
            {
                if (_student.Courses!.Any(cos => cos.Id.Equals(course.Id)))
                {
                    course.Registered = true;
                }
            }
            loading = false;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async void ClickHandler(Guid courseId)
    {
        try
        {
            var course = _courses!.FirstOrDefault(x => x.Id == courseId);
            var response = await CourseRegistrationHelper.EnrollOrUnregisterCourseAsync(StudentService, AuthenticationService.User.Id, course!);

            if (response)
            {
                toastService.ShowSuccess($"Successfully {(course!.Registered ? "enrolled to" : "un-registered from")} ({course!.Name}) course.");
                loading = false;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
