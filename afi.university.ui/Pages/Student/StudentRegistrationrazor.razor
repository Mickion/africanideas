@page "/student/registration"
@inject IStudentService StudentService
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<div class="row">

    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>First Name</label>
            <InputText @bind-Value="model!.FirstName" class="form-control" />
            <ValidationMessage For="@(() => model.FirstName)" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText @bind-Value="model.LastName" class="form-control" />
            <ValidationMessage For="@(() => model.LastName)" />
        </div>
        <div class="form-group">
            <label>Email Address</label>
            <InputText @bind-Value="model.Email" class="form-control" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText @bind-Value="model.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => model.Password)" />
        </div>
        <div class="row mt-3">
            <div class="col-8"></div>
            <div class="col-2 float-end">
                <a href="/login" class="btn btn-secondary btn-md active float-end" role="button" aria-pressed="true">Cancel</a>
            </div>
            <div class="col-2 float-end">
                <button class="btn btn-primary float-end">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Registar
                </button>
            </div>
        </div>


        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger mt-3 mb-0">@error</div>
        }
    </EditForm>
</div>

@code {
    private bool loading;
    private string? error;
    private RegistrationRequest? model;

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {            
            var response = await StudentService.RegisterStudentAsync(model);

            //TODO: Add toast
            if(!string.IsNullOrEmpty(response.StudentNumber))
                NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

}
