@attribute [Authorize]
@inject IStudentService StudentService
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

@if (loading || _student == null)
{
    <div class="spinner-border spinner-border-sm"></div>
}
else
{
    if (_student.Courses!.Count() > 0)
    {
        <table class="table small table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>NQF Level</th>
                    <th>Duration</th>
                    <th>Registered</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in _student.Courses!)
                {
                    <tr>
                        <td>@course.Name</td>
                        <td>@course.NQFLevel</td>
                        <td>@course.Duration</td>
                        <td>
                            @if (course.Registered)
                            {
                                <span class="oi oi-circle-check" aria-hidden="true" style="color: green !important;"></span>
                            }
                            else
                            {
                                <span class="oi oi-circle-x" aria-hidden="true" style="color:red !important"></span>
                            }

                        </td>
                        <td>
                            @if (course.Registered)
                            {
                                <button class="btn btn-primary float-end" @onclick="e => ClickHandler(course.Id)">De-Register</button>
                            }
                            else
                            {
                                <button class="btn btn-primary float-end" @onclick="e => ClickHandler(course.Id)">Register</button>
                            }

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }    

    else
    {
        <p class="align-content-center" style="text-align:center;">You have not enrolled for any courses. Please click on "Courses" tab to register course </p>              
    }
}

@code {
    private bool loading;
    private StudentResponse? _student;

    protected override async Task OnInitializedAsync()
    {
        loading = true;        
        _student = await StudentService.GetStudentInformationAsync(new StudentRequest(AuthenticationService.User.Id));
        loading = false;
    }

    private async void ClickHandler(Guid courseId)
    {
        // var course = _myCourses!.FirstOrDefault(x => x.Id == courseId);
        // course!.Registered = !course.Registered;

        // if (course!.Registered)
        // {
        //     CourseRegistrationRequest courseRegistration = new()
        //         {
        //             StudentId = AuthenticationService.User.Id,
        //             Name = course.Name,
        //             Duration = course.Duration,
        //         };
        //     var response = await StudentService.RegisterToACourseAsync(courseRegistration);
        //     StateHasChanged();
        //     //LoadStudentDashboard();
        // }
        // else
        // {   
        //     CourseRegistrationRequest courseRegistration = new()
        //         {
        //             StudentId = AuthenticationService.User.Id,
        //             Name = course.Name,
        //             Duration = course.Duration,
        //         };
        //     var response = await StudentService.RegisterToACourseAsync(courseRegistration);
        //     StateHasChanged();
        //     //LoadStudentDashboard();
        // }
    }

    private async void LoadStudentDashboard()
    {
        // loading = true;
        // _myCourses = await StudentService.GetRegisteredCoursesAsync(new StudentCoursesRequest() { StudentId = AuthenticationService.User.Id });
        // loading = false;
    }
}
